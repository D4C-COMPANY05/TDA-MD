const { makeid } = require('./gen-id');
const express = require('express');
const fs = require('fs');
let router = express.Router();
const pino = require("pino");
const {
  default: makeWASocket,
  useMultiFileAuthState,
  delay,
  Browsers,
  makeCacheableSignalKeyStore,
} = require('@whiskeysockets/baileys');
const { upload } = require('./mega');

// Supprimer un fichier ou dossier
function removeFile(FilePath) {
  if (!fs.existsSync(FilePath)) return false;
  fs.rmSync(FilePath, { recursive: true, force: true });
}

// Route principale pour pairing
router.get('/', async (req, res) => {
  const id = makeid();                       // nouvel ID unique
  let num = req.query.number;
  let sessionPath = `./session/${id}`;       // chaque utilisateur a son propre dossier

  async function TDA_XMD_PAIR_CODE() {
    const { state, saveCreds } = await useMultiFileAuthState(sessionPath);

    try {
      const items = ["Safari"];
      const randomItem = items[Math.floor(Math.random() * items.length)];

      let sock = makeWASocket({
        auth: {
          creds: state.creds,
          keys: makeCacheableSignalKeyStore(state.keys, pino({ level: "fatal" }).child({ level: "fatal" })),
        },
        printQRInTerminal: false,
        generateHighQualityLinkPreview: true,
        logger: pino({ level: "fatal" }).child({ level: "fatal" }),
        browser: Browsers.macOS("Desktop"),
      });

      // Envoyer le code d'appariement au navigateur
      if (!sock.authState.creds.registered) {
        let code = await sock.requestPairingCode(num);
        if (!res.headersSent) {
          res.json({ code: code });
        }
      }

      sock.ev.on('creds.update', saveCreds);

      sock.ev.on("connection.update", async (s) => {
        const { connection, lastDisconnect } = s;

        if (connection === "open") {
          console.log(`üë§ ${sock.user.id} connected ‚úÖ (session persisted in ${sessionPath})`);

          // T√©l√©charger les identifiants sur Mega (si le fichier de cr√©dits existe)
          if (fs.existsSync(sessionPath + '/creds.json')) {
            try {
              let codeMsg = await sock.sendMessage(sock.user.id, {
                text: `TDA XMD a √©t√© connect√© avec succ√®s.`,
                contextInfo: {
                  externalAdReply: {
                    title: 'TDA XMD',
                    body: "D√©velopp√© par TDA",
                    thumbnailUrl: "https://telegra.ph/file/0259b109556dd2d580190.jpg",
                    sourceUrl: "https://whatsapp.com/channel/EXEMPLE_CHANNEL_TDA",
                    mediaType: 1,
                    renderLargerThumbnail: true
                  }
                }
              }, { quoted: codeMsg });

              console.log(`üë§ ${sock.user.id} connected ‚úÖ (session persisted in ${sessionPath})`);

            } catch (e) {
              console.error("‚ùå Erreur durant l'appariement:", e);
              await sock.sendMessage(sock.user.id, { text: "‚ùå Erreur durant l'appariement: " + e.message });
            }
          } else {
            console.log("Fichier de cr√©dits non trouv√©. Le t√©l√©chargement est ignor√©.");
          }
        } else if (connection === "close") {
          console.log('‚ùå connexion ferm√©e', lastDisconnect?.error || lastDisconnect);

          // G√©rer l'erreur "Stream Error" - code 515 ou la "Connexion ferm√©e" - code 428
          if (lastDisconnect?.error?.output?.statusCode === 515 || lastDisconnect?.error?.output?.statusCode === 428) {
            console.log("‚ö†Ô∏è Session corrompue. R√©initialisation en cours...");
            removeFile(sessionPath);

            if (!res.headersSent) {
              // On informe juste le client HTTP de r√©essayer
              res.json({ code: "üîÑ Session r√©initialis√©e, l'appariement est de nouveau requis", sessionId: id });
            }
          }
        }
      });
    } catch (err) {
      console.log("Service red√©marr√©", err);
      if (!res.headersSent) {
        res.status(503).json({ code: "‚ùó Service non disponible" });
      }
    }
  }

  return await TDA_XMD_PAIR_CODE();
});

module.exports = router;

